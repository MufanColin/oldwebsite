<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OSTEP Chapter15 Mechanism: Address Translation</title>
    <link href="/2023/05/13/OSTEP-Chapter15-Mechanism-Address-Translation/"/>
    <url>/2023/05/13/OSTEP-Chapter15-Mechanism-Address-Translation/</url>
    
    <content type="html"><![CDATA[<h1>OSTEP Chapter15 Mechanism: Address Translation</h1><div class="note note-info">            <p>本文是个人 OSTEP Chapter15 的阅读感想。</p>          </div><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/vm-mechanism.pdf">点此阅读原文</a></p><h2 id="地址翻译的机理">地址翻译的机理</h2><p>在 OSTEP Chapter13 中，我们提到过程序中产生的地址都是虚拟地址 (virtual address)，对于程序而言，它眼中的内存就是地址空间 (address space)，这是可以任由它驰骋的广阔草原。在某种程度上，操作系统和硬件承担了很多脏活累活，其中很重要的一个工作便是建立从虚拟地址到物理地址的映射关系，或者说把程序中的虚拟地址翻译成真实的物理地址，即在有限的物理内存中画一个圈。那么在本章中，我们就要来重点研究这个地址转化 (地址翻译, address translation) 的过程。</p><p>在本章中我们介绍的 address translation 严格意义上被称为 hardware-based address translation，因为这个从虚拟地址到物理地址的翻译过程中主要是由一些硬件来完成的。在这里 address translation 可以理解为虚拟化过程中的一个环节，我们刚才说 address translation 主要是由硬件来完成的，但是我们也不要忘记整个对于物理内存 (physical memory) 的虚拟化 (virtualization) 是由操作系统和硬件共同努力的结果，操作系统在其中更多地起到一个 manager 的作用，负责指挥、监控、调度等等，硬件在某种程度上可以理解为更加底层的实际干活的工人。这一切的目的就是为了构造出一种幻象 (illusion)，即每个程序都有一个独占的 virtual memory space，在这个里面该程序可以自由发挥，但事实上背后的脏活累活(在不同的程序间切换从而在不同的时间点运行不同的程序等等)是由 OS 和 hardware 共同完成的。</p><p>在正式开始进行地址翻译之前，我们做出如下三点假设(限制)，在这里要指出的是我们在后续章节会逐渐放松这三条限制。</p><div class="note note-info">            <ol><li>某个程序的 address space 在被转化到 physical memory 后依然是连续的。</li><li>每个程序的 address space 不会太大，比物理内存的总容量小。</li><li>每个程序的 address space 大小相等。</li></ol>          </div><p>下方的 <a href="#process-and-its-address-space">Figure 15.1</a> 展示的是一个进程和它的地址空间 address space，在这个地址空间中有三大块: program code, heap, stack。在 <a href="#process-and-its-address-space">Figure 15.1</a> 中，可以看到在 program code 块中，从地址128 (虚拟地址) 开始存放着三条汇编语句，同时变量的值被存放在 stack 当中的 15KB 处。对于一个程序而言，它的世界的全部就是这样一个 address space，它的大小是 16KB，从地址 0 开始。例如一个程序有可能想在 address space 的地址 0 位置放一条 load 指令，但是 OS 和硬件并不一定要把这条 load 指令转换到物理地址中的 0 位置。甚至如果在物理地址的 0 位置已经存储了其它程序的内容的情况下更是不能够把这样的一条 load 指令转换到物理地址的 0 位置。在下方的 <a href="#physical-memory-with-a-single-relocated-process">Figure 15.2</a> 中，我们可以看到操作系统和硬件配合后并没有把 16KB 的 address space 翻译到物理内存的 0-16KB，而是把 address space 中的 0-16KB 翻译到了物理内存的 32KB-48KB，可以想象到原有的地址空间中的虚拟地址经过线性平移就可以对应到物理内存中真实的物理地址。</p><p>现在问题就变成了 OS 和硬件应该采用一种什么样的机制，将一个程序的 address space 中的虚拟地址转化为物理内存中真实存在的物理地址。</p><figure>    <img src="/img/process_and_its_address_space.png" width="250" height="auto" id="process-and-its-address-space"></figure><figure>    <img src="/img/physical_memory_with_a_single_relocated_process.png" width="500" height="auto" id="physical-memory-with-a-single-relocated-process"></figure><p>在这里我们引入一种名叫 <strong>base and bounds</strong> 的方法，这里面 base 和 bounds 分别指代两个寄存器 (register)。我们指出：通过引入这两个寄存器，我们便可以完成对于每个程序当中的虚拟地址到物理地址之间的转换，并且我们可以确保不同程序的虚拟地址在被转换到物理地址后不会出现&quot;交叉撞车&quot;的情况。</p><p>我们依然以 <a href="#process-and-its-address-space">Figure 15.1</a> 和 <a href="#physical-memory-with-a-single-relocated-process">Figure 15.2</a> 两图为例，在 <a href="#process-and-its-address-space">Figure 15.1</a> 中，我们可以看到对于程序而言，它眼中的内存世界就是自己的这个 address space，在这个 address space 中，起始地址是 0KB，跨度是 16KB (这也是 address space 的全部大小)。在 <a href="#physical-memory-with-a-single-relocated-process">Figure 15.2</a> 中，可以看到这 16KB 的空间由虚拟地址中的 0-16KB 被转化为 物理地址中的 32KB-48KB。这本质上就相当于变换了基地址，在 Figure 15.1 中，基地址为 0KB，而在 Figure 15.2 中，基地址为 32KB，这便是通过设置 base register 为 32KB 所达成的。这样的一种转换方式用公式概括即为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>physical address</mtext><mo>=</mo><mtext>virtual address</mtext><mo>+</mo><mtext>base</mtext></mrow><annotation encoding="application/x-tex">\text{physical address} = \text{virtual address} + \text{base}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">physical address</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">virtual address</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">base</span></span></span></span></span></span></p><p>接着我们来看 bound register 的作用，bound register 主要起到保护作用，即确保不同程序的虚拟地址空间在被转换为物理地址后不会出现&quot;交叉撞车&quot;的情况。在  <a href="#process-and-its-address-space">Figure 15.1</a> 对应的例子中，bound register 的值即为 16KB。这是因为对于大小为 16KB 的虚拟地址空间而言，合法的虚拟地址就是 0-16KB，若虚拟地址为负数或者虚拟地址大于 16KB，这都是不合法的，操作系统会抛出异常，大概率会终止这个进程。因此，bound register 可以理解为 address space 的大小。如果需要被转化的虚拟地址是负数，或者已经超出了 address space 的容量，那么显然这是一个不合法的虚拟地址，不应该被转化到物理地址。</p><div class="note note-warning">            <p>As you can see from the example, it is easy for you to simply add the base address to the virtual address(which can rightly be viewed as an offset into the address space) to get the resulting physical address. Only if the virtual address is “too big” or negative will the result be a fault, causing an exception to be raised.</p>          </div><p>base register 和 bound register 都是硬件，它们帮助进行 address translation，我们有时把它们归入 MMU (memory management unit)。</p><h2 id="硬件提供的帮助">硬件提供的帮助</h2><p>接下来我们对于硬件提供的帮助做一个总结。首先在对 CPU 的虚拟化过程中，我们提到 CPU 有两种工作模式。操作系统运行在级别更高的内核态(privileged mode, kernel mode)，而一般的用户应用(程序)则运行在低级别的用户态。在内核态下，操作系统对于整个计算机都有掌控权，而在用户态下，应用对于计算机的控制权是有限的。在 CPU 中，base register 和 bound register 组成了 CPU 中的 MMU 模块，它们二者起到了将虚拟地址翻译成物理地址的作用。与此同时，操作系统还要对可能非法的地址转化(负地址，越界地址等)抛出异常信息，并及时终止这些过程。</p><h2 id="操作系统的工作">操作系统的工作</h2><p>在之前我们提到，操作系统要和硬件打配合，通过使用 base register 和 bound register 来完成地址的转化过程 (address translation)。这其实就相当于操作系统在查询物理内存中何处有一个空间足够的空档能够让 virtual address space 转换进去，如果存在这样一块空档，那就可以通过设置 base register 实现转化。</p><p>操作系统是怎么知道物理内存哪里有空档？我们说当一个新的进程被创立了之后，这个新的进程当然就会拥有一个属于它的 address space，这是它的虚拟世界，没有人与它争抢。但同时操作系统也需要私下里给这个 address space 在物理内存中找到一块空地，这个时候操作系统通常会去搜索一个叫做 free list 的数据结构，这个 free list 中存放的便是物理内存中的空闲块，相当于操作系统从 free list 找到一个空闲块，然后利用这个物理内存中的空闲块建立一个从虚拟地址到物理地址之间的映射关系，然后这个原本的空闲块便不再空闲了，它就会从 free list 当中被剔除出去。</p><p>当一个进程被终止的时候，它的 address space 就相当于消失了，因此在物理内存中也就不需要与之对应的部分，这时候操作系统需要从物理内存中回收这部分物理地址，可以把它打包起来添加到 free list 当中。</p><p>在 CPU 的 MMU (memory management unit) 中，我们有一个 base register，还有一个 bound register。操作系统如何利用这一个 base register 和一个 bound register 在诸多进程中切换？这时候就需要及时备份 base register 和 bound register 的值。具体而言，对于不同的进程来说，它们最后被转化到的物理地址肯定都是不一样的。因此，对于不同的进程所需要的 base register 中存放的值也是不一样的。当从 A 进程切换到 B 进程时，有必要把与 A 进程对应的 base register 的值和 bound register 的值备份到 memory 当中，然后再把 base register 的值和 bound register 的值更新为 B 进程对应的 base 和 bound。而当我们需要重启 A 进程的时候，我们应该从内存中再调出 A 进程对应的 base 和 bound，并把它们分别赋给 base register 和 bound register。这样一个负责进程控制的结构被称为 PCB (process control block)。同时我们指出有了 base register 和 bound register 后，我们想改变从虚拟地址到物理地址的映射关系也变得很容易，这指的就是原先 A 程序的映射位于物理内存的 B 区，现在如果我们需要把 A 程序的映射改变到物理内存的 C 区，最核心的便是 base register 的更新工作。</p><p>最后，操作系统还要对于整个计算机的安全性负责。当一个程序想要访问超出自身 address space 容量的虚拟地址时，它便已经越界了。如果操作系统不能够对此抛出异常 (exception) 并及时终止异常程序，那么这个程序很可能会侵蚀其它程序所在的内存空间，造成难以估量的不良后果。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OSTEP Chapter13 The Abstraction: Address Spaces</title>
    <link href="/2023/05/12/OSTEP-Chapter13-The-Abstraction-Address-Spaces/"/>
    <url>/2023/05/12/OSTEP-Chapter13-The-Abstraction-Address-Spaces/</url>
    
    <content type="html"><![CDATA[<h1>OSTEP Chapter13 The Abstraction: Address Spaces</h1><div class="note note-info">            <p>本文是个人 OSTEP Chapter13 的阅读感想。</p>          </div><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/vm-intro.pdf">点此阅读原文</a></p><div class="note note-warning">            <p>However, we have to keep those pesky users in mind, and doing so requires the <strong>OS</strong> to <strong>create an</strong> easy to use <strong>abstraction of physical memory</strong>. We call this abstraction the <strong>address space</strong>, and it is <strong>the running program’s view of memory in the system</strong>. Understanding this fundamental OS abstraction of memory is key to understanding how memory is virtualized.</p>          </div><p>在本章中，最重要的概念就是<strong>地址空间</strong> (<strong>address space</strong>)。地址空间是操作系统对于物理内存的抽象。对于程序 (program) 而言，它眼中的内存就是地址空间。</p><p>对于一个程序或进程来说，它的地址空间经过简化主要包括 code, stack, heap 三个核心部分。其中 code 部分存放的就是一行行的代码，stack 在函数调用中起到关键作用，特别是在递归中每向下深入递归一层，函数便会被 push 到栈中，而在 <code>return</code> 时，函数便会被 pop 出栈，heap 则用于存放一些动态分配的内存，例如 C 语言中的 <code>malloc()</code> 和 C++、Java中的 <code>new</code>。</p><p>下面的 Figure 13.3 就是一个 16KB 大小的 address space 的示意图，其中 code 部分位于 0KB-1KB 之间。heap 部分从 1KB 开始，并可能在程序运行过程中向下增长或向上缩小。stack 部分从最下方的 16KB 处开始，并可能在程序运行过程中向上增长或向下缩小。</p><figure>    <img src="/img/an_example_address_space.png" width="500" height="auto" id="an-example-address-space"></figure><p>我们说这样的一个 16KB 大小的 address space 其实就是 OS 为这个程序提供的一种抽象化、虚拟化的内存空间。这段代码可能在物理内存中并不位于 0KB-16KB，而可能在物理内存的任何一个地方。对于代码而言，它头顶的天空就是 OS 为它提供的这样一个虚拟化的 address space，在它的世界里没有人跟它竞争这个大的游乐园，它可以尽情地在这个 address space 中干它想干的事情，不只是对于这段代码，对于每一段代码都是一样的，OS 为每一段代码都造了一个梦，一个属于代码自己的梦工厂。而从虚拟地址到物理地址的转化以及这个过程中可能存在的一系列问题，都由 OS 和硬件间相互配合来解决，比如说 OS 会把代码在 address space 中干的事情翻译成在真实的有限的物理内存中应该做的事情。</p><div class="note note-warning">            <p>When, for example, process A in <a href="#three-processes-sharing-memory">Figure 13.2</a> tries to perform a load at address 0(which we will call a <strong>virtual address</strong>), somehow the OS, in tandem with some hardware support, will <strong>have to make sure the load doesn’t actually go to physical address 0</strong> but <strong>rather to physical address 320KB</strong> (<strong>where A is loaded into memory</strong>). This is the key to virtualization of memory, which underlies every modern computer system in the world.</p>          </div><figure>    <img src="/img/three_processes_sharing_memory.png" width="500" height="auto" id="three-processes-sharing-memory"></figure><div class="note note-danger">            <p><strong>Every address you see is virtual.</strong></p>          </div><figure>    <img src="/img/every_address_you_see_is_virtual.png" width="600" height="auto" id="every-address-you-see-is-virtual"></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OSTEP Chapter12 A Dialogue on Memory Virtualization</title>
    <link href="/2023/05/12/OSTEP-Chapter12-A-Dialogue-on-Memory-Virtualization/"/>
    <url>/2023/05/12/OSTEP-Chapter12-A-Dialogue-on-Memory-Virtualization/</url>
    
    <content type="html"><![CDATA[<h1>OSTEP Chapter12 A Dialogue on Memory Virtualization</h1><div class="note note-info">            <p>本文是个人 OSTEP Chapter12 的阅读感想。</p>          </div><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/dialogue-vm.pdf">点此阅读原文</a></p><div class="note note-warning">            <p>In any case, <strong>we are not nearly done with virtualization</strong>! Rather, you have just seen how to virtualize the CPU, but really there is a <strong>big monster</strong> waiting in the closet: <strong>memory</strong>. <strong>Virtualizing memory</strong> is a <strong>complicated</strong> and requires us to <strong>understand</strong> many <strong>more intricate details</strong> about <strong>how the hardware and OS interact</strong>.</p>          </div><p>在此前几章中，我们学习了如何对 CPU 进行虚拟化 (virtualization)。但是这并不是虚拟化的全部，事实上，还有一块难啃的骨头: 虚拟化内存。虚拟化内存是一个庞大且繁杂的系统性工程，它需要我们对于硬件和操作系统之间的交互细节有更加深入的理解。</p><p>在这个板块中，我们依然会遵循一个循序渐进的原则，先从 base/bounds (此时还不清楚这个的具体所指) 入手，然后我们会学习 TLB 和 多级页表等更有难度的内容。最后，我们希望读者有能力描述功能丰富的现代虚拟内存管理工具的工作原理。</p><div class="note note-warning">            <p>For understanding virtual memory, start with this: <strong>every address generated by a user program is a virtual memory</strong>.</p>          </div><p>作者在这段引言中提到了虚拟地址 (virtual address) 的概念。他指出<strong>所有从用户编写的程序中产生出来的地址都是虚拟地址</strong>。 OS 给每个进程 (process，可能此时此刻还无法理解进程的严格含义) 提供了一个虚拟的幻象: 每个进程都有一个专属于它的庞大的 virtual memory，在这样的一个 virtual memory 中当然也有着海量的虚拟地址，即 virtual address。每个进程可以使劲在自己的这一亩三分地里折腾，OS 会在硬件的帮助下通过一些神奇的操作将这些虚拟地址转换为物理地址，物理地址是归根到底的本源，因为别管进程或者应用多么花里胡哨，最底层的其实还是硬件和物理，只有把这些虚拟地址映射成物理地址，才算真正落地，当然这些事情就不归 too young too simple 的进程或者应用来管了，它们只要在各自的虚拟空间中使劲 high 就可以。</p><p>那么为什么会采用这样的一种设计(每个进程有各自的 virtual memory space，然后由操作系统与硬件打配合把虚拟地址转化为物理地址)？第一个原因便是对于使用者(比如说程序员)更加便捷友好。virtual memory space 其实就像一个游乐场，没有太多的约束，你可以自由玩耍，释放天性，施展才华。</p><div class="note note-info">            <p>但如果一个程序员需要时时刻刻想着我到底应该把程序里的各个部分存放在有限的物理内存的什么位置，想想就令人头大，不是吗？</p>          </div><p>此外还有对于安全性的考量。对于每个 program 而言，在虚拟化的情景下，它们所占有的 memory space 或者说 address space 是独立的，这样就避免了 A 程序篡改了 B 程序所在的内存的情况发生。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OSTEP Chapter03 A Dialogue on Virtualization</title>
    <link href="/2023/05/12/OSTEP-Chapter03-A-Dialogue-on-Virtualization/"/>
    <url>/2023/05/12/OSTEP-Chapter03-A-Dialogue-on-Virtualization/</url>
    
    <content type="html"><![CDATA[<h1>OSTEP Chapter03 A Dialogue on Virtualization</h1><div class="note note-info">            <p>本文是个人 OSTEP Chapter03 的阅读感想。</p>          </div><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/dialogue-virtualization.pdf">点此阅读原文</a></p><p>在本文中，作者用桃子(peach)的例子引出了操作系统中的第一个重要概念: <strong>虚拟</strong>(<strong>virtualization</strong>)。</p><p>孕育出虚拟 (<strong>virtualization</strong>) 这个想法的摇篮在我看来是在现实生活中客观存在且必须得到解决的<strong>矛盾</strong>。具体来说，是如何在只有一个<strong>实体</strong>桃子 (one <strong>physical</strong> peach) 的情况下让若干人觉得他们各自占有一个桃子。因此，<strong>虚拟</strong>桃子 (<strong>virtual</strong> peach) 的概念应运而生，这里我们暂且不去讨论如何由一个<strong>实体</strong>桃子(<strong>physical</strong> peach)变出若干个<strong>虚拟</strong>桃子 (<strong>virtual</strong> peach)。</p><div class="note note-danger">            <p>我们只是强调这些虚拟桃子<strong>归根结底</strong>都是那一个实体桃子变出来的，也就是说每个人实际上其实都在和其他所有人<strong>分享</strong> (<strong>share</strong>) 一个实体桃子。但当人数相对不多的时候，人们感觉不到自己在和别人分享桃子，他们会觉得自己<strong>独占</strong>了一个桃子，这便是<strong>虚拟</strong> (<strong>virtualization</strong>) 的魅力所在。</p>          </div><p>类似地，假设我们的电脑只有一个 CPU，但是需要使用 CPU 的应用 (application) 多于一个。在这种情形下，我们便可以通过虚拟 (virtualization) 的方法将一个客观存在的实体 CPU 变成若干个虚拟的 CPU，这样每个应用在运行的时候会觉得自己独占了一个 CPU，但实际上只有一个 CPU。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OS AI Spring 2023 Lab1 Analysis</title>
    <link href="/2023/05/11/OS-AI-Spring-2023-Lab1-Analysis/"/>
    <url>/2023/05/11/OS-AI-Spring-2023-Lab1-Analysis/</url>
    
    <content type="html"><![CDATA[<h1>OS AI Spring 2023 Lab1 Analysis</h1><h2 id="1-熟悉关键文件的位置">1. 熟悉关键文件的位置</h2><div class="note note-success">            <p><code>tree</code> 命令是你的好伙伴。</p>          </div><p>当进入以<strong>个人学号</strong>命名的文件夹后，我们可以使用 <code>tree</code> 命令看到整个文件夹的架构图。</p><p>在 Lab1 的课上测试中，我们的任务大概率是对 <code>print.c</code> 文件进行功能扩展，因此我们一定要对 <code>print.c</code> 文件的位置了如指掌。</p><div class="note note-info">            <p>在2023春的 OS(AI) 课程中，<code>print.c</code> 文件位于<strong>学号文件夹</strong>内的 <code>lib</code> 文件夹中。</p>          </div><h2 id="2-printk-到底是干什么的">2. <code>printk</code> 到底是干什么的</h2><h3 id="2-1-printk-和-printf-没什么区别">2.1 <code>printk</code> 和 <code>printf</code> 没什么区别</h3><div class="note note-info">            <p>如果你在看完教程后一头雾水，完全不明白 <code>printk</code> 到底在干什么，请记住: <code>printk</code> 和 C 语言中的 <code>printf</code> <strong>没有什么本质区别</strong>，只不过你需要亲自实现它(别怕，填几个空而已)。</p>          </div><p><code>printf</code> 函数主要由两大块组成，第一部分是<strong>双引号中的一个字符串</strong>，第二部分是此<strong>字符串后面跟着的一堆东西</strong>。双引号中的字符串中某些东西会原样输出，而某些东西则会被替换输出，替换的内容就来自于字符串后面跟着的一堆东西，这种替换是有序的，有的时候某些替换方式在我们看来可能很神奇，但其实这都是预先设定好的规则。</p><p>下面这段代码和它的运行结果或许可以给你带来更加直观的感受：<a href="https://www.programiz.com/cpp-programming/library-function/cstdio/printf">点此查看详情</a>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// set precision to 3 decimal places</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3f / %.3f = %.3f \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set width to 5 digits with *</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Setting width %*c \n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// get octal value of an integer</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Octal equivalent of %d is %o"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">5.000 / 3.000 = 1.667Setting width     a Octal equivalent of 10 is 12 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-学会抓住主要矛盾">2.2 学会抓住主要矛盾</h3><div class="note note-info">            <p>在2023春的 OS(AI) 课程中，<code>printk.c</code> 文件位于<strong>学号文件夹</strong>内的 <code>kern</code> 文件夹中。</p>          </div><h3 id="2-2-1-初见-printk">2.2.1 初见 <code>printk</code></h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>va_list ap<span class="token punctuation">;</span><span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">vprintfmt</span><span class="token punctuation">(</span>outputk<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>printk.c</code> 大致就长上面这个样子，里面有很多看起来云里雾里的东西，一口吃不成胖子，首先我们明白两件事即可:</p><ul><li><code>fmt</code> 的地位就是 <code>printf</code> 双引号里面的那个字符串</li><li><code>printk</code> 函数调用了一个名叫 <code>vprintfmt</code> 的函数，后者有四个参数。</li></ul><h3 id="2-2-2-读懂-vprintfmt-它是-print-c-里的一个函数">2.2.2 读懂 <code>vprintfmt</code>(它是 <code>print.c</code> 里的一个函数)</h3><h4 id="2-2-2-1-一些不能跳过的引言">2.2.2.1 一些不能跳过的引言</h4><div class="note note-info">            <p>在2023春的 OS(AI) 课程中，<code>print.c</code> 文件位于<strong>学号文件夹</strong>内的 <code>lib</code> 文件夹中。</p>          </div><p>在 <code>print.c</code> 文件中有四个主要的函数，其中第一个是 <code>vprintfmt</code> 函数，剩下三个是 helper function。从 helper function 的名字便能推断出这些函数都是你的好帮手！</p><p>在编程中 helper function 往往起到<strong>将复杂问题分解成若干子问题直至程序员能够逐个击破</strong>以及<strong>将某些关键的子功能封装成函数从而增强代码可读性</strong>的作用。在 <code>print.c</code> 文件中，这三个 helper function 包括: <code>print_char</code>, <code>print_str</code>, <code>print_num</code>。</p><div class="note note-primary">            <p>古人云：万事俱备，只欠东风。我们这里并不欠东风，我们的东风就是这三个helper function，它们已经写好，无需任何修改。<strong>我们的工作恰恰就是真正做到&quot;万事俱备&quot;</strong>。具体来讲，我们在任何需要打印的环节，只需要&quot;无脑&quot;使用这三个 helper function 即可。但是什么时候使用，以及需要使用的时候使用哪个，是需要我们自己去甄别的(这便是代码中各种分支判断的来源)。我们前期做足了各种各样的准备工作，把这些 helper function 需要用到的参数都调节好了，等到最后一步打印的时候，我们已经筋疲力竭，我们对三个 helper function 说：剩下的任务就交给你们了，于是它们抖擞精神，完成了最后的打印工作，我们也因此在屏幕上看到了最后的打印结果。<strong>所以千万不要抱怨输出结果有误</strong>，<strong>出现错误只能怨自己</strong>，<strong>这个锅 helper function 们坚决不背</strong>！</p>          </div><div class="note note-info">            <p>在2023春的 OS(AI) 课程中，<code>print.c</code> 中的三个 helper function 不需要填空。</p>          </div><h4 id="2-2-2-2-vprintfmt-函数声明">2.2.2.2 <code>vprintfmt</code> 函数声明</h4><div class="note note-info">            <p>在2023春的 OS(AI) 课程中，<code>print.h</code> 文件位于<strong>学号文件夹</strong>内的 <code>include</code> 文件夹中。</p>          </div><p><code>vprintfmt</code>函数的定义可以在 <code>print.h</code> 文件中找到，如下所示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vprintfmt</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><details>  <summary><code>print.h</code>的完整代码</summary>  <div class="content"><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_print_h_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_print_h_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;types.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * 'vprintfmt' is a formatting function that allows different backends (i.e., output sinks) * to be used for printing. It takes four arguments: * * - 'fmt_callback_t out': a function pointer to the output sink that receives the *   formatted output generated by 'vprintfmt'. * - 'void *data': a context pointer passed to the 'out' callback function. It can be used *   to store additional output sink-specific data. * - 'const char *fmt': the format string, similar to the format string in 'printf'. * - 'va_list ap': a variadic argument list that provides the arguments to be formatted. * * The format callback function 'out' receives the following arguments: * * - 'void *data': the same 'data' pointer passed to 'vprintfmt'. * - 'const char *buf': a pointer to a buffer containing the formatted output. * - 'size_t len': the number of bytes in the buffer. * * Note that the buffer may not be null-terminated and may contain embedded null bytes, * so the output sink should treat 'len' as the actual length of the buffer to print. */</span><span class="token keyword">void</span> <span class="token function">vprintfmt</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>  </div></details><div class="note note-danger">            <p>在下面的解释中，可能会模糊化参数和函数的概念，若有不严谨之处请谅解。</p>          </div><p><code>vprintfmt</code> 声明中的四个参数中的 <code>out</code> 的功能可<strong>近似看作输出</strong>，只不过它负责的是双引号中<strong>不需要被替换</strong>的部分的输出，当我们想输出双引号中不需要被替换的部分的时候就需要用到这个函数。<code>out</code> 函数在使用时也需要我们为其提供三个参数: <code>data</code>, <code>buf</code>, <code>len</code>( <code>out</code> 函数的具体用法请查看 <code>print.h</code> 文件)。其中参数 <code>data</code> 出现了两次，一次是在函数 <code>vprintfmt</code> 中，另一次是在函数 <code>out</code> 中。至此我们便解释了 <code>out</code> 和 <code>data</code> 都代表什么意思。</p><p><code>fmt</code> 是一个 <code>const char *</code> 类型的变量(指针)，可以理解为 C 语言中用来表达字符串的一种手段(想深入理解推荐去问 ChatGPT 哦)，通过对 <code>fmt</code> 指针的移动，我们就可以聚焦到双引号字符串中的某些特定字符上。</p><p><code>ap</code> 可以大致理解为双引号字符串后面跟着的一串东西，类似于一个 list，学名叫做&quot;变长参数表&quot;。在 <code>stdarg.h</code> 头文件中为处理变长参数表定义了一些神奇的工具，我们会用到其中的 <code>va_arg</code>，它可以帮助我们按照顺序依次从变长参数表(双引号后面跟着的一串东西)中根据<strong>量的类型</strong>取我们需要的量。</p><div class="note note-info">            <p>在2023春的 OS(AI) 课程中，<code>stdarg.h</code> 文件位于<strong>学号文件夹</strong>内的 <code>include</code> 文件夹中。</p>          </div><h4 id="2-2-2-3-读懂-fmt-理解为双引号里的字符串即可">2.2.2.3 读懂 <code>fmt</code> (理解为双引号里的字符串即可)</h4><figure>    <img src="/img/printk_explanation_1.png" width="600" height="auto" id="printk-explanation-1"></figure><figure>    <img src="/img/printk_explanation_2.png" width="600" height="auto" id="printk-explanation-2"></figure><div class="note note-success">            <p>上面两幅图主要说了</p><ul><li><code>fmt</code> 中同时包含直接输出的字符(使用先前提到的 <code>out</code>)和格式符，格式符的特点是以 <code>%</code> 开始，并且遵循 <code>%[flags][width][length]&lt;specifier&gt;</code> 的格式规范。</li><li><code>specifier</code> 指定了输出变量的类型，如不同进制的数、字符、字符串，需要特别注意二进制数、八进制数和十六进制数在输出时都是无符号数( <code>unsigned</code>，默认大于等于0，但是十进制数并没有说这一点，意味着<strong>十进制数在输出时需要考虑正负问题</strong>)。</li><li><code>flag</code>中涉及<strong>判断左对齐或右对齐</strong>以及<strong>使用0填充宽度</strong>两大问题。</li><li><code>width</code>指定了要打印的数的最小宽度，并在未设定0填充的情况下<strong>默认使用空格填充</strong>。</li><li><code>length</code> 主要表征的是数据类型的长度，在本问题中进行了简化，即若 <code>length</code> 副格式符为 <code>l</code>，则代表输出的数被视为 <code>long</code> 型，<code>length</code> 这种副格式符对格式符 <code>specifier</code> 起到的就是修饰作用。</li></ul>          </div><h4 id="2-2-2-4-vprintfmt-的内部逻辑">2.2.2.4 <code>vprintfmt</code> 的内部逻辑</h4><p><code>vprintfmt</code> 函数的主体是一个 <code>for</code> 循环，在这个 <code>for</code> 循环中，我们对 <code>fmt</code> 格式字符串中出现的不同类型的字符进行个性化处理，对于无需转换的字符直接输出，对于需要转换的字符按照不同的格式符或副格式符的定义进行转换。在这个 <code>for</code> 循环中，我们遵循的基本原则就是从左到右依次遍历格式字符串 <code>fmt</code> 中的每个字符，直至遍历到字符串终止的标志 <code>\0</code>，通过 <code>break</code> 语句跳出 <code>for</code> 循环。遍历字符串的方法是移动 <code>fmt</code> 指针。</p><p>为了能够实现定制化处理，我们需要设定一些标签(flag)作为依据，这些标签(flag)就像路牌一样，指引着车辆走向不同的岔路，恰似在本问题中我们需要对不同格式的数据采用不同的输出方式。具体而言，这些 flag 包括 <code>long_flag</code> (输出是否为 <code>long</code> 型)，<code>neg_flag</code> (输出是否为负数)，<code>ladjust</code> (输出是否为左对齐), <code>padc</code> (用于填充的字符)等。</p><p>做足了准备工作后，我们便进入了对格式字符串 <code>fmt</code> 的解析过程，这也是 <code>vprintfmt</code> 函数中最关键的部分。在格式字符串中，有一个字符的地位非常特殊，它就是 <code>%</code>，一旦出现了 <code>%</code>，就意味着后面的若干字符有着超越自身的特殊含义(它们可能是格式符或副格式符)。因此一个较为自然的想法就是从左到右遍历 <code>fmt</code> 格式字符串，当我们遍历到 <code>%</code> 后，就需要判断在它后面出现的字符到底是哪种格式符或副格式符，并根据判断结果做出相对应的处理，即决定应该是直接输出还是替换输出。</p><p>在代码填空中，我们要做的工作便是捋清楚当遇到不同类型的格式符或副格式符时，哪些 flag 应该变，而哪些 flag 应该保持不变，我们的目标就是通过前期的参数调节(如调节 <code>neg_flag</code>，<code>ladjust</code> 的值等)，使得最终传递给 <code>print_char</code>, <code>print_str</code>, <code>print_num</code> 的参数都是我们想要的正确结果，避免错配现象的发生，如明明想要右对齐，<code>ladjust</code> 却为1，明明想要 0 填充，<code>padc</code> 却是空格。</p><details>  <summary><code>print.c</code>的完整代码</summary>  <div class="content"><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;print.h></span></span><span class="token comment">/* forward declaration */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_char</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_str</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_num</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vprintfmt</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token keyword">long</span> num<span class="token punctuation">;</span><span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">int</span> long_flag<span class="token punctuation">;</span> <span class="token comment">// output is long (rather than int)</span><span class="token keyword">int</span> neg_flag<span class="token punctuation">;</span>  <span class="token comment">// output is negative</span><span class="token keyword">int</span> ladjust<span class="token punctuation">;</span>   <span class="token comment">// output is left-aligned</span><span class="token keyword">char</span> padc<span class="token punctuation">;</span>     <span class="token comment">// padding char</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* scan for the next '%' */</span><span class="token comment">/* Exercise 1.4: Your code here. (1/8) */</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> fmt<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'%'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* flush the string found so far */</span><span class="token comment">/* Exercise 1.4: Your code here. (2/8) */</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> p <span class="token operator">-</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>fmt <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">/* check "are we hitting the end?" */</span><span class="token comment">/* Exercise 1.4: Your code here. (3/8) */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* we found a '%' */</span><span class="token comment">/* Exercise 1.4: Your code here. (4/8) */</span>fmt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/* check format flag */</span><span class="token comment">/* Exercise 1.4: Your code here. (5/8) */</span>ladjust <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// ladjust = 0 means the output should be right-aligned.</span>padc <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ladjust <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ladjust = 1 means the output should be left-aligned.</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>padc <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* get width */</span><span class="token comment">/* Exercise 1.4: Your code here. (6/8) */</span><span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token char">'0'</span> <span class="token operator">&lt;=</span> <span class="token operator">*</span>fmt <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>fmt <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>fmt <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>width <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/* check for long */</span><span class="token comment">/* Exercise 1.4: Your code here. (7/8) */</span>long_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'l'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>long_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>neg_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Refer to other parts (case 'b', case 'o', etc.) and func 'print_num' to * complete this part. Think the differences between case 'd' and the * others. (hint: 'neg_flag'). */</span><span class="token comment">/* Exercise 1.4: Your code here. (8/8) */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'o'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'O'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'u'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'U'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'x'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'X'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_char</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> c<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_str</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> s<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'\0'</span><span class="token operator">:</span>fmt<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token comment">/* output this char as it is */</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* --------------- local help functions --------------------- */</span><span class="token keyword">void</span> <span class="token function">print_char</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token keyword">char</span> space <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>space<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>space<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_str</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>len<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>length <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_num</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> neg_flag<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span>       <span class="token keyword">int</span> ladjust<span class="token punctuation">,</span> <span class="token keyword">char</span> padc<span class="token punctuation">,</span> <span class="token keyword">int</span> upcase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* algorithm : *  1. prints the number from left to right in reverse form. *  2. fill the remaining spaces with padc if length is longer than *     the actual length *     TRICKY : if left adjusted, no "0" padding. *    if negtive, insert  "0" padding between "0" and number. *  3. if (!ladjust) we reverse the whole string including paddings *  4. otherwise we only reverse the actual string representing the num. */</span><span class="token keyword">int</span> actualLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span>length <span class="token operator">+</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> u <span class="token operator">%</span> base<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'0'</span> <span class="token operator">+</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>upcase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'A'</span> <span class="token operator">+</span> tmp <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> tmp <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>u <span class="token operator">/=</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>neg_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* figure out actual length and adjust the maximum length */</span>actualLength <span class="token operator">=</span> p <span class="token operator">-</span> buf<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> actualLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>length <span class="token operator">=</span> actualLength<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* add padding */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>padc <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>neg_flag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ladjust <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>padc <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> actualLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> padc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>buf<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> actualLength<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> padc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* prepare to reverse the string */</span><span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> end<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>end <span class="token operator">=</span> actualLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>end <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* adjust the string pointer */</span><span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">></span> begin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> buf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>begin<span class="token operator">++</span><span class="token punctuation">;</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>  </div></details><h2 id="3-lab1-exam-总结">3. lab1-exam 总结</h2><div class="note note-success">            <p>祝贺自己 <strong>lab1-exam</strong> 顺利通过，拿到 <strong>100</strong> 分。</p>          </div><div class="note note-info">            <p>在2023春的 OS(AI) 课程 lab1-exam 中只有一道基础题，没有附加题(extra)。</p>          </div><h3 id="3-1-题目回忆">3.1 题目回忆</h3><p>要求我们实现新的格式符 T(T 代表 tuple，如果想了解更多有关 tuple 的信息，请<a href="https://en.wikipedia.org/wiki/Tuple">点击这里</a>)。</p><p>格式符 T 的作用为：使用 <code>vprintfmt</code> 函数中变长列表中的接下来的<strong>三个</strong>整数参数 a, b, c 输出 <code>(a,b,c)</code> 字符串(<strong>外侧是两个圆括号</strong>， <strong>每两个数之间用逗号分隔</strong>)。要求<strong>格式符 T 也能使用与其他格式符同等的副格式符</strong>(即 <code>&lt;flag&gt;</code>， <code>&lt;width&gt;</code>， <code>&lt;length&gt;</code> 三个副格式符，这个要求的意思是副格式符与格式符 T 可以叠加使用)。这<strong>三个参数共用一组副格式符</strong>，<strong>受到的修饰相同</strong>。</p><h4 id="测试样例">测试样例</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">tuple_1_check</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"%s%T%s"</span><span class="token punctuation">,</span> <span class="token string">"This is a testcase: "</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"the tuple is %T\n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="期望输出">期望输出</h4><p>在终端输入命令 <code>make test lab=1_tuple &amp;&amp; make run</code> 后，输出结果如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">This is a testcase: (2023,2023,2023)the tuple is (1,9,8)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><a href="https://cookedbear.top/2023/03/buaa-os-lab1-exam/">补充练习: 格式化说明符 R</a></p><h3 id="3-2-实现代码-case-R-和-case-T-是补充的内容">3.2 实现代码(<code>case 'R'</code> 和 <code>case 'T'</code> 是补充的内容)</h3><details>  <summary><code>print.c</code>的完整代码</summary>  <div class="content"><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;print.h></span></span><span class="token comment">/* forward declaration */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_char</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_str</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_num</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vprintfmt</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token keyword">long</span> num<span class="token punctuation">;</span><span class="token keyword">char</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">int</span> long_flag<span class="token punctuation">;</span> <span class="token comment">// output is long (rather than int)</span><span class="token keyword">int</span> neg_flag<span class="token punctuation">;</span>  <span class="token comment">// output is negative</span><span class="token keyword">int</span> ladjust<span class="token punctuation">;</span>   <span class="token comment">// output is left-aligned</span><span class="token keyword">char</span> padc<span class="token punctuation">;</span>     <span class="token comment">// padding char</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* scan for the next '%' */</span><span class="token comment">/* Exercise 1.4: Your code here. (1/8) */</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> fmt<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'%'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* flush the string found so far */</span><span class="token comment">/* Exercise 1.4: Your code here. (2/8) */</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> p <span class="token operator">-</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>fmt <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">/* check "are we hitting the end?" */</span><span class="token comment">/* Exercise 1.4: Your code here. (3/8) */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* we found a '%' */</span><span class="token comment">/* Exercise 1.4: Your code here. (4/8) */</span>fmt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/* check format flag */</span><span class="token comment">/* Exercise 1.4: Your code here. (5/8) */</span>ladjust <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// ladjust = 0 means the output should be right-aligned.</span>padc <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ladjust <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ladjust = 1 means the output should be left-aligned.</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>padc <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* get width */</span><span class="token comment">/* Exercise 1.4: Your code here. (6/8) */</span><span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token char">'0'</span> <span class="token operator">&lt;=</span> <span class="token operator">*</span>fmt <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>fmt <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>fmt <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>width <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/* check for long */</span><span class="token comment">/* Exercise 1.4: Your code here. (7/8) */</span>long_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt <span class="token operator">==</span> <span class="token char">'l'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>long_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>neg_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">*</span>fmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Refer to other parts (case 'b', case 'o', etc.) and func 'print_num' to * complete this part. Think the differences between case 'd' and the * others. (hint: 'neg_flag'). */</span><span class="token comment">/* Exercise 1.4: Your code here. (8/8) */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'o'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'O'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'u'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'U'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'x'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'X'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'R'</span><span class="token operator">:</span>tmp <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token char">','</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>neg_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token char">')'</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'T'</span><span class="token operator">:</span>tmp <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token char">','</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>neg_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token char">','</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>neg_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>long_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>neg_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token function">print_num</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> neg_flag<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">,</span> padc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token char">')'</span><span class="token punctuation">;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_char</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> c<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_str</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> data<span class="token punctuation">,</span> s<span class="token punctuation">,</span> width<span class="token punctuation">,</span> ladjust<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'\0'</span><span class="token operator">:</span>fmt<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token comment">/* output this char as it is */</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fmt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* --------------- local help functions --------------------- */</span><span class="token keyword">void</span> <span class="token function">print_char</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token keyword">char</span> space <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>space<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>space<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_str</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>len<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>length <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_num</span><span class="token punctuation">(</span><span class="token class-name">fmt_callback_t</span> out<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> neg_flag<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span>       <span class="token keyword">int</span> ladjust<span class="token punctuation">,</span> <span class="token keyword">char</span> padc<span class="token punctuation">,</span> <span class="token keyword">int</span> upcase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* algorithm : *  1. prints the number from left to right in reverse form. *  2. fill the remaining spaces with padc if length is longer than *     the actual length *     TRICKY : if left adjusted, no "0" padding. *    if negtive, insert  "0" padding between "0" and number. *  3. if (!ladjust) we reverse the whole string including paddings *  4. otherwise we only reverse the actual string representing the num. */</span><span class="token keyword">int</span> actualLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span>length <span class="token operator">+</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> u <span class="token operator">%</span> base<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'0'</span> <span class="token operator">+</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>upcase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'A'</span> <span class="token operator">+</span> tmp <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> tmp <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>u <span class="token operator">/=</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>neg_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* figure out actual length and adjust the maximum length */</span>actualLength <span class="token operator">=</span> p <span class="token operator">-</span> buf<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> actualLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>length <span class="token operator">=</span> actualLength<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* add padding */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>padc <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>neg_flag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ladjust <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>padc <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> actualLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> padc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>buf<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> actualLength<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> padc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* prepare to reverse the string */</span><span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> end<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ladjust<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>end <span class="token operator">=</span> actualLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>end <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* adjust the string pointer */</span><span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">></span> begin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> buf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>begin<span class="token operator">++</span><span class="token punctuation">;</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">out</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>  </div></details><div class="note note-info">            <p>着重关注输出 <code>(</code> 和 <code>,</code> 的方法以及在处理 tuple 时 <code>neg_flag</code> 在每输出完一个整数后需要置零的细节。</p>          </div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OS AI Spring 2023 Lab1 Report</title>
    <link href="/2023/04/30/OS-AI-Spring-2023-Lab1-Report/"/>
    <url>/2023/04/30/OS-AI-Spring-2023-Lab1-Report/</url>
    
    <content type="html"><![CDATA[<h1>OS AI Spring 2023 Lab1 Report</h1><h2 id="Thinking-1-1">Thinking 1.1</h2><figure>    <img src="/img/os_thinking_01_01.png" width="700" height="auto" id="os-thinking-01-01"></figure><h3 id="问题解答">问题解答</h3><p>使用 <code>objdump --help</code> 调出帮助文档，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">用法：objdump &lt;选项> &lt;文件> 显示来自目标 &lt;文件> 的信息。 至少必须给出以下选项之一：  -a, --archive-headers    Display archive header information  -f, --file-headers       Display the contents of the overall file header  -p, --private-headers    Display object format specific file header contents  -P, --private=OPT,OPT... Display object format specific contents  -h, --[section-]headers  Display the contents of the section headers  -x, --all-headers        Display the contents of all headers  -d, --disassemble        Display assembler contents of executable sections  -D, --disassemble-all    Display assembler contents of all sections      --disassemble=&lt;sym>  Display assembler contents from &lt;sym>  -S, --source             Intermix source code with disassembly      --source-comment[=&lt;txt>] Prefix lines of source code with &lt;txt>  -s, --full-contents      Display the full contents of all sections requested  -g, --debugging          Display debug information in object file  -e, --debugging-tags     Display debug information using ctags style  -G, --stabs              Display (in raw form) any STABS info in the file  -W, --dwarf[a/=abbrev, A/=addr, r/=aranges, c/=cu_index, L/=decodedline,              f/=frames, F/=frames-interp, g/=gdb_index, i/=info, o/=loc,              m/=macro, p/=pubnames, t/=pubtypes, R/=Ranges, l/=rawline,              s/=str, O/=str-offsets, u/=trace_abbrev, T/=trace_aranges,              U/=trace_info]                           Display the contents of DWARF debug sections  -Wk,--dwarf=links        Display the contents of sections that link to                            separate debuginfo files  -WK,--dwarf=follow-links                           Follow links to separate debug info files (default)  -WN,--dwarf=no-follow-links                           Do not follow links to separate debug info files  -L, --process-links      Display the contents of non-debug sections in                            separate debuginfo files.  (Implies -WK)      --ctf[=SECTION]      Display CTF info from SECTION, (default `.ctf')  -t, --syms               Display the contents of the symbol table(s)  -T, --dynamic-syms       Display the contents of the dynamic symbol table  -r, --reloc              Display the relocation entries in the file  -R, --dynamic-reloc      Display the dynamic relocation entries in the file  @&lt;file>                  Read options from &lt;file>  -v, --version            Display this program's version number  -i, --info               List object formats and architectures supported  -H, --help               Display this information<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>重点来看 <code>-D</code> 和 <code>-S</code> 两个选项，即我们在指导书中用到的 <code>objdump -DS xxx</code>。其中 <code>-D</code> 的功能是 <code>Display assembler contents of all sections</code>，即<strong>显示所有节的汇编内容</strong>。<code>-S</code> 的功能是 <code>Intermix source code with disassembly</code>，即<strong>将源代码和反汇编代码交替显示</strong>。</p><h3 id="实验细节">实验细节</h3><p>首先创建一个名为 <code>main.c</code> 的文件，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用命令 <code>gcc -c main.c</code> 得到 <code>main.o</code> 文件。再用命令 <code>objdump -DS main.o &gt; output1</code> 反汇编得到 <code>output1</code> 文件，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">main.o：     文件格式 elf64-x86-64Disassembly of section .text:0000000000000000 &lt;main>:   0:f3 0f 1e fa          endbr64    4:55                   push   %rbp   5:48 89 e5             mov    %rsp,%rbp   8:48 83 ec 10          sub    $0x10,%rsp   c:c7 45 f4 01 00 00 00 movl   $0x1,-0xc(%rbp)  13:c7 45 f8 02 00 00 00 movl   $0x2,-0x8(%rbp)  1a:8b 55 f4             mov    -0xc(%rbp),%edx  1d:8b 45 f8             mov    -0x8(%rbp),%eax  20:01 d0                add    %edx,%eax  22:89 45 fc             mov    %eax,-0x4(%rbp)  25:8b 45 fc             mov    -0x4(%rbp),%eax  28:89 c6                mov    %eax,%esi  2a:48 8d 05 00 00 00 00 lea    0x0(%rip),%rax        # 31 &lt;main+0x31>  31:48 89 c7             mov    %rax,%rdi  34:b8 00 00 00 00       mov    $0x0,%eax  39:e8 00 00 00 00       call   3e &lt;main+0x3e>  3e:b8 00 00 00 00       mov    $0x0,%eax  43:c9                   leave    44:c3                   ret    Disassembly of section .rodata:0000000000000000 &lt;.rodata>:   0:25                   .byte 0x25   1:64 0a 00             or     %fs:(%rax),%alDisassembly of section .comment:0000000000000000 &lt;.comment>:   0:00 47 43             add    %al,0x43(%rdi)   3:43 3a 20             rex.XB cmp (%r8),%spl   6:28 55 62             sub    %dl,0x62(%rbp)   9:75 6e                jne    79 &lt;main+0x79>   b:74 75                je     82 &lt;main+0x82>   d:20 31                and    %dh,(%rcx)   f:31 2e                xor    %ebp,(%rsi)  11:33 2e                xor    (%rsi),%ebp  13:30 2d 31 75 62 75    xor    %ch,0x75627531(%rip)        # 7562754a &lt;main+0x7562754a>  19:6e                   outsb  %ds:(%rsi),(%dx)  1a:74 75                je     91 &lt;main+0x91>  1c:31 7e 32             xor    %edi,0x32(%rsi)  1f:32 2e                xor    (%rsi),%ch  21:30 34 29             xor    %dh,(%rcx,%rbp,1)  24:20 31                and    %dh,(%rcx)  26:31 2e                xor    %ebp,(%rsi)  28:33 2e                xor    (%rsi),%ebp  2a:30 00                xor    %al,(%rax)Disassembly of section .note.gnu.property:0000000000000000 &lt;.note.gnu.property>:   0:04 00                add    $0x0,%al   2:00 00                add    %al,(%rax)   4:10 00                adc    %al,(%rax)   6:00 00                add    %al,(%rax)   8:05 00 00 00 47       add    $0x47000000,%eax   d:4e 55                rex.WRX push %rbp   f:00 02                add    %al,(%rdx)  11:00 00                add    %al,(%rax)  13:c0 04 00 00          rolb   $0x0,(%rax,%rax,1)  17:00 03                add    %al,(%rbx)  19:00 00                add    %al,(%rax)  1b:00 00                add    %al,(%rax)  1d:00 00                add    %al,(%rax)...Disassembly of section .eh_frame:0000000000000000 &lt;.eh_frame>:   0:14 00                adc    $0x0,%al   2:00 00                add    %al,(%rax)   4:00 00                add    %al,(%rax)   6:00 00                add    %al,(%rax)   8:01 7a 52             add    %edi,0x52(%rdx)   b:00 01                add    %al,(%rcx)   d:78 10                js     1f &lt;.eh_frame+0x1f>   f:01 1b                add    %ebx,(%rbx)  11:0c 07                or     $0x7,%al  13:08 90 01 00 00 1c    or     %dl,0x1c000001(%rax)  19:00 00                add    %al,(%rax)  1b:00 1c 00             add    %bl,(%rax,%rax,1)  1e:00 00                add    %al,(%rax)  20:00 00                add    %al,(%rax)  22:00 00                add    %al,(%rax)  24:45 00 00             add    %r8b,(%r8)  27:00 00                add    %al,(%rax)  29:45 0e                rex.RB (bad)   2b:10 86 02 43 0d 06    adc    %al,0x60d4302(%rsi)  31:7c 0c                jl     3f &lt;main+0x3f>  33:07                   (bad)    34:08 00                or     %al,(%rax)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用命令 <code>gcc main.o -o main.out</code> 得到 <code>main.out</code> 的可执行文件。再用命令 <code>objdump -DS main.out &gt; output2</code> 反汇编得到 <code>output2</code> 文件，内容如下所示(节选):</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">main.out：     文件格式 elf64-x86-64Disassembly of section .interp:0000000000000318 &lt;.interp>: 318:2f                   (bad)   319:6c                   insb   (%dx),%es:(%rdi) 31a:69 62 36 34 2f 6c 64 imul   $0x646c2f34,0x36(%rdx),%esp 321:2d 6c 69 6e 75       sub    $0x756e696c,%eax 326:78 2d                js     355 &lt;__abi_tag-0x37> 328:78 38                js     362 &lt;__abi_tag-0x2a> 32a:36 2d 36 34 2e 73    ss sub $0x732e3436,%eax 330:6f                   outsl  %ds:(%rsi),(%dx) 331:2e 32 00             cs xor (%rax),%alDisassembly of section .note.gnu.property:0000000000000338 &lt;.note.gnu.property>: 338:04 00                add    $0x0,%al 33a:00 00                add    %al,(%rax) 33c:20 00                and    %al,(%rax) 33e:00 00                add    %al,(%rax) 340:05 00 00 00 47       add    $0x47000000,%eax 345:4e 55                rex.WRX push %rbp 347:00 02                add    %al,(%rdx) 349:00 00                add    %al,(%rax) 34b:c0 04 00 00          rolb   $0x0,(%rax,%rax,1) 34f:00 03                add    %al,(%rbx) 351:00 00                add    %al,(%rax) 353:00 00                add    %al,(%rax) 355:00 00                add    %al,(%rax) 357:00 02                add    %al,(%rdx) 359:80 00 c0             addb   $0xc0,(%rax) 35c:04 00                add    $0x0,%al 35e:00 00                add    %al,(%rax) 360:01 00                add    %eax,(%rax) 362:00 00                add    %al,(%rax) 364:00 00                add    %al,(%rax)...Disassembly of section .note.gnu.build-id:0000000000000368 &lt;.note.gnu.build-id>: 368:04 00                add    $0x0,%al 36a:00 00                add    %al,(%rax) 36c:14 00                adc    $0x0,%al 36e:00 00                add    %al,(%rax) 370:03 00                add    (%rax),%eax 372:00 00                add    %al,(%rax) 374:47                   rex.RXB 375:4e 55                rex.WRX push %rbp 377:00 bf 1b 99 45 01    add    %bh,0x145991b(%rdi) 37d:43 99                rex.XB cltd  37f:cb                   lret    380:d0 81 32 d8 89 18    rolb   0x1889d832(%rcx) 386:6a 66                push   $0x66 388:cf                   iret    389:3e                   ds 38a:c0                   .byte 0xc0 38b:73                   .byte 0x73Disassembly of section .note.ABI-tag:000000000000038c &lt;__abi_tag>: 38c:04 00                add    $0x0,%al 38e:00 00                add    %al,(%rax) 390:10 00                adc    %al,(%rax) 392:00 00                add    %al,(%rax) 394:01 00                add    %eax,(%rax) 396:00 00                add    %al,(%rax) 398:47                   rex.RXB 399:4e 55                rex.WRX push %rbp 39b:00 00                add    %al,(%rax) 39d:00 00                add    %al,(%rax) 39f:00 03                add    %al,(%rbx) 3a1:00 00                add    %al,(%rax) 3a3:00 02                add    %al,(%rdx) 3a5:00 00                add    %al,(%rax) 3a7:00 00                add    %al,(%rax) 3a9:00 00                add    %al,(%rax)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用命令 <code>readelf -S main.o</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">There are 14 section headers, starting at offset 0x278:节头：  [号] 名称              类型             地址              偏移量       大小              全体大小          旗标   链接   信息   对齐  [ 0]                   NULL             0000000000000000  00000000       0000000000000000  0000000000000000           0     0     0  [ 1] .text             PROGBITS         0000000000000000  00000040       0000000000000045  0000000000000000  AX       0     0     1  [ 2] .rela.text        RELA             0000000000000000  000001b8       0000000000000030  0000000000000018   I      11     1     8  [ 3] .data             PROGBITS         0000000000000000  00000085       0000000000000000  0000000000000000  WA       0     0     1  [ 4] .bss              NOBITS           0000000000000000  00000085       0000000000000000  0000000000000000  WA       0     0     1  [ 5] .rodata           PROGBITS         0000000000000000  00000085       0000000000000004  0000000000000000   A       0     0     1  [ 6] .comment          PROGBITS         0000000000000000  00000089       000000000000002c  0000000000000001  MS       0     0     1  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  000000b5       0000000000000000  0000000000000000           0     0     1  [ 8] .note.gnu.pr[...] NOTE             0000000000000000  000000b8       0000000000000020  0000000000000000   A       0     0     8  [ 9] .eh_frame         PROGBITS         0000000000000000  000000d8       0000000000000038  0000000000000000   A       0     0     8  [10] .rela.eh_frame    RELA             0000000000000000  000001e8       0000000000000018  0000000000000018   I      11     9     8  [11] .symtab           SYMTAB           0000000000000000  00000110       0000000000000090  0000000000000018          12     4     8  [12] .strtab           STRTAB           0000000000000000  000001a0       0000000000000014  0000000000000000           0     0     1  [13] .shstrtab         STRTAB           0000000000000000  00000200       0000000000000074  0000000000000000           0     0     1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  D (mbind), l (large), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用命令 <code>readelf -S main.out</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">There are 31 section headers, starting at offset 0x3698:节头：  [号] 名称              类型             地址              偏移量       大小              全体大小          旗标   链接   信息   对齐  [ 0]                   NULL             0000000000000000  00000000       0000000000000000  0000000000000000           0     0     0  [ 1] .interp           PROGBITS         0000000000000318  00000318       000000000000001c  0000000000000000   A       0     0     1  [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338       0000000000000030  0000000000000000   A       0     0     8  [ 3] .note.gnu.bu[...] NOTE             0000000000000368  00000368       0000000000000024  0000000000000000   A       0     0     4  [ 4] .note.ABI-tag     NOTE             000000000000038c  0000038c       0000000000000020  0000000000000000   A       0     0     4  [ 5] .gnu.hash         GNU_HASH         00000000000003b0  000003b0       0000000000000024  0000000000000000   A       6     0     8  [ 6] .dynsym           DYNSYM           00000000000003d8  000003d8       00000000000000a8  0000000000000018   A       7     1     8  [ 7] .dynstr           STRTAB           0000000000000480  00000480       000000000000008f  0000000000000000   A       0     0     1  [ 8] .gnu.version      VERSYM           0000000000000510  00000510       000000000000000e  0000000000000002   A       6     0     2  [ 9] .gnu.version_r    VERNEED          0000000000000520  00000520       0000000000000030  0000000000000000   A       7     1     8  [10] .rela.dyn         RELA             0000000000000550  00000550       00000000000000c0  0000000000000018   A       6     0     8  [11] .rela.plt         RELA             0000000000000610  00000610       0000000000000018  0000000000000018  AI       6    24     8  [12] .init             PROGBITS         0000000000001000  00001000       000000000000001b  0000000000000000  AX       0     0     4  [13] .plt              PROGBITS         0000000000001020  00001020       0000000000000020  0000000000000010  AX       0     0     16  [14] .plt.got          PROGBITS         0000000000001040  00001040       0000000000000010  0000000000000010  AX       0     0     16  [15] .plt.sec          PROGBITS         0000000000001050  00001050       0000000000000010  0000000000000010  AX       0     0     16  [16] .text             PROGBITS         0000000000001060  00001060       000000000000012e  0000000000000000  AX       0     0     16  [17] .fini             PROGBITS         0000000000001190  00001190       000000000000000d  0000000000000000  AX       0     0     4  [18] .rodata           PROGBITS         0000000000002000  00002000       0000000000000008  0000000000000000   A       0     0     4  [19] .eh_frame_hdr     PROGBITS         0000000000002008  00002008       0000000000000034  0000000000000000   A       0     0     4  [20] .eh_frame         PROGBITS         0000000000002040  00002040       00000000000000ac  0000000000000000   A       0     0     8  [21] .init_array       INIT_ARRAY       0000000000003db8  00002db8       0000000000000008  0000000000000008  WA       0     0     8  [22] .fini_array       FINI_ARRAY       0000000000003dc0  00002dc0       0000000000000008  0000000000000008  WA       0     0     8  [23] .dynamic          DYNAMIC          0000000000003dc8  00002dc8       00000000000001f0  0000000000000010  WA       7     0     8  [24] .got              PROGBITS         0000000000003fb8  00002fb8       0000000000000048  0000000000000008  WA       0     0     8  [25] .data             PROGBITS         0000000000004000  00003000       0000000000000010  0000000000000000  WA       0     0     8  [26] .bss              NOBITS           0000000000004010  00003010       0000000000000008  0000000000000000  WA       0     0     1  [27] .comment          PROGBITS         0000000000000000  00003010       000000000000002b  0000000000000001  MS       0     0     1  [28] .symtab           SYMTAB           0000000000000000  00003040       0000000000000360  0000000000000018          29    18     8  [29] .strtab           STRTAB           0000000000000000  000033a0       00000000000001dc  0000000000000000           0     0     1  [30] .shstrtab         STRTAB           0000000000000000  0000357c       000000000000011a  0000000000000000           0     0     1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  D (mbind), l (large), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用命令 <code>mips-linux-gnu-gcc -c main.c</code> 得到新的 <code>main.o</code> 文件。再使用命令 <code>mips-linux-gnu-objdump -DS main.o &gt; output3</code> 反汇编得到 <code>output3</code> 文件，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">main.o：     文件格式 elf32-tradbigmipsDisassembly of section .text:00000000 &lt;main>:   0:27bdffd0 addiusp,sp,-48   4:afbf002c swra,44(sp)   8:afbe0028 sws8,40(sp)   c:03a0f025 moves8,sp  10:3c1c0000 luigp,0x0  14:279c0000 addiugp,gp,0  18:afbc0010 swgp,16(sp)  1c:24020001 liv0,1  20:afc2001c swv0,28(s8)  24:24020002 liv0,2  28:afc20020 swv0,32(s8)  2c:8fc3001c lwv1,28(s8)  30:8fc20020 lwv0,32(s8)  34:00621021 adduv0,v1,v0  38:afc20024 swv0,36(s8)  3c:8fc50024 lwa1,36(s8)  40:3c020000 luiv0,0x0  44:24440000 addiua0,v0,0  48:8f820000 lwv0,0(gp)  4c:0040c825 movet9,v0  50:0320f809 jalrt9  54:00000000 nop  58:8fdc0010 lwgp,16(s8)  5c:00001025 movev0,zero  60:03c0e825 movesp,s8  64:8fbf002c lwra,44(sp)  68:8fbe0028 lws8,40(sp)  6c:27bd0030 addiusp,sp,48  70:03e00008 jrra  74:00000000 nop...Disassembly of section .reginfo:00000000 &lt;.reginfo>:   0:f200003c 0xf200003c...Disassembly of section .MIPS.abiflags:00000000 &lt;.MIPS.abiflags>:   0:00002002 srla0,zero,0x0   4:01010005 lsazero,t0,at,0x1...Disassembly of section .pdr:00000000 &lt;.pdr>:   0:00000000 nop   4:c0000000 llzero,0(zero)   8:fffffffc 0xfffffffc...  14:00000030 tgezero,zero  18:0000001e 0x1e  1c:0000001f 0x1fDisassembly of section .rodata:00000000 &lt;.rodata>:   0:25640a00 addiua0,t3,2560...Disassembly of section .comment:00000000 &lt;.comment>:   0:00474343 0x474343   4:3a202855 xorizero,s1,0x2855   8:62756e74 0x62756e74   c:75203130 jalx480c4c0 &lt;main+0x480c4c0>  10:2e332e30 sltius3,s1,11824  14:2d317562 sltius1,t1,30050  18:756e7475 jalx5b9d1d4 &lt;main+0x5b9d1d4>  1c:31292031 andit1,t1,0x2031  20:302e332e andit6,at,0x332e  24:地址 0x0000000000000024 越界。Disassembly of section .gnu.attributes:00000000 &lt;.gnu.attributes>:   0:41000000 mftc0zero,c0_index   4:0f676e75 jald9db9d4 &lt;main+0xd9db9d4>   8:00010000 sllzero,at,0x0   c:00070405 0x70405<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用命令 <code>mips-linux-gnu-readelf -S main.o</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">There are 17 section headers, starting at offset 0x344:节头：  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            00000000 000000 000000 00      0   0  0  [ 1] .text             PROGBITS        00000000 000040 000080 00  AX  0   0 16  [ 2] .rel.text         REL             00000000 00027c 000030 08   I 14   1  4  [ 3] .data             PROGBITS        00000000 0000c0 000000 00  WA  0   0 16  [ 4] .bss              NOBITS          00000000 0000c0 000000 00  WA  0   0 16  [ 5] .reginfo          MIPS_REGINFO    00000000 0000c0 000018 18   A  0   0  4  [ 6] .MIPS.abiflags    MIPS_ABIFLAGS   00000000 0000d8 000018 18   A  0   0  8  [ 7] .pdr              PROGBITS        00000000 0000f0 000020 00      0   0  4  [ 8] .rel.pdr          REL             00000000 0002ac 000008 08   I 14   7  4  [ 9] .mdebug.abi32     PROGBITS        00000000 000110 000000 00      0   0  1  [10] .rodata           PROGBITS        00000000 000110 000010 00   A  0   0 16  [11] .comment          PROGBITS        00000000 000120 000026 01  MS  0   0  1  [12] .note.GNU-stack   PROGBITS        00000000 000146 000000 00      0   0  1  [13] .gnu.attributes   GNU_ATTRIBUTES  00000000 000146 000010 00      0   0  1  [14] .symtab           SYMTAB          00000000 000158 000100 10     15  13  4  [15] .strtab           STRTAB          00000000 000258 000023 00      0   0  1  [16] .shstrtab         STRTAB          00000000 0002b4 000090 00      0   0  1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  D (mbind), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用命令 <code>mips-linux-gnu-gcc main.o -o main.out</code> 得到 <code>main.out</code> 的可执行文件。再用命令<code>mips-linux-gnu-objdump -DS main.out &gt; output4</code> 反汇编得到 <code>output4</code> 文件，内容如下所示(节选):</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">main.out：     文件格式 elf32-tradbigmipsDisassembly of section .interp:00400194 &lt;.interp>:  400194:2f6c6962 sltiut4,k1,26978  400198:2f6c642e sltiut4,k1,25646  40019c:736f2e31 0x736f2e31...Disassembly of section .MIPS.abiflags:004001a8 &lt;.MIPS.abiflags>:  4001a8:00002002 srla0,zero,0x0  4001ac:01010005 lsazero,t0,at,0x1...Disassembly of section .reginfo:004001c0 &lt;.reginfo>:  4001c0:b20000f6 0xb20000f6...  4001d4:00419010 0x419010Disassembly of section .note.gnu.build-id:004001d8 &lt;.note.gnu.build-id>:  4001d8:00000004 sllvzero,zero,zero  4001dc:00000014 0x14  4001e0:00000003 srazero,zero,0x0  4001e4:474e5500 bz.w$w14,4155e8 &lt;_end+0x4588>  4001e8:be1f9f49 cache0x1f,-24759(s0)  4001ec:7f52206a 0x7f52206a  4001f0:b5650adb 0xb5650adb  4001f4:19963dd3 0x19963dd3  4001f8:becb0ac1 cache0xb,2753(s6)Disassembly of section .note.ABI-tag:004001fc &lt;__abi_tag>:  4001fc:00000004 sllvzero,zero,zero  400200:00000010 mfhizero  400204:00000001 movfzero,zero,$fcc0  400208:474e5500 bz.w$w14,41560c &lt;_end+0x45ac>  40020c:00000000 nop  400210:00000003 srazero,zero,0x0  400214:00000002 srlzero,zero,0x0  400218:00000000 nopDisassembly of section .dynamic:0040021c &lt;_DYNAMIC>:  40021c:00000001 movfzero,zero,$fcc0  400220:00000044 0x44  400224:0000000c syscall  400228:004004c4 0x4004c4  40022c:0000000d break  400230:004007f0 tgev0,zero,0x1f  400234:00000004 sllvzero,zero,zero  400238:004002fc 0x4002fc  40023c:00000005 lsazero,zero,zero,0x1  400240:004003d8 0x4003d8  400244:00000006 srlvzero,zero,zero  400248:00400338 0x400338  40024c:0000000a movzzero,zero,zero  400250:000000a8 0xa8  400254:0000000b movnzero,zero,zero  400258:00000010 mfhizero  40025c:70000016 udi6zero,zero,zero,0x0  400260:00411010 0x411010  400264:70000035 0x70000035  400268:00010dac 0x10dac  40026c:00000015 0x15  400270:00000000 nop  400274:00000003 srazero,zero,0x0  400278:00411020 addv0,v0,at  40027c:70000001 madduzero,zero  400280:00000001 movfzero,zero,$fcc0  400284:70000005 msubuzero,zero  400288:00000002 srlzero,zero,0x0  40028c:70000006 0x70000006  400290:00400000 0x400000  400294:7000000a 0x7000000a  400298:00000006 srlvzero,zero,zero  40029c:70000011 udi1zero,zero,zero,0x0  4002a0:0000000a movzzero,zero,zero  4002a4:70000012 udi2zero,zero,zero,0x0  4002a8:0000001d 0x1d  4002ac:70000013 udi3zero,zero,zero,0x0  4002b0:00000005 lsazero,zero,zero,0x1  4002b4:6ffffffe 0x6ffffffe  4002b8:00400494 0x400494  4002bc:6fffffff 0x6fffffff  4002c0:00000001 movfzero,zero,$fcc0  4002c4:6ffffff0 0x6ffffff0  4002c8:00400480 0x400480...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>再使用命令 <code>mips-linux-gnu-readelf -S main.out</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">There are 32 section headers, starting at offset 0x1874:节头：  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            00000000 000000 000000 00      0   0  0  [ 1] .interp           PROGBITS        00400194 000194 00000d 00   A  0   0  1  [ 2] .MIPS.abiflags    MIPS_ABIFLAGS   004001a8 0001a8 000018 18   A  0   0  8  [ 3] .reginfo          MIPS_REGINFO    004001c0 0001c0 000018 18   A  0   0  4  [ 4] .note.gnu.bu[...] NOTE            004001d8 0001d8 000024 00   A  0   0  4  [ 5] .note.ABI-tag     NOTE            004001fc 0001fc 000020 00   A  0   0  4  [ 6] .dynamic          DYNAMIC         0040021c 00021c 0000e0 08   A  9   0  4  [ 7] .hash             HASH            004002fc 0002fc 00003c 04   A  8   0  4  [ 8] .dynsym           DYNSYM          00400338 000338 0000a0 10   A  9   1  4  [ 9] .dynstr           STRTAB          004003d8 0003d8 0000a8 00   A  0   0  1  [10] .gnu.version      VERSYM          00400480 000480 000014 02   A  8   0  2  [11] .gnu.version_r    VERNEED         00400494 000494 000030 00   A  9   1  4  [12] .init             PROGBITS        004004c4 0004c4 00007c 00  AX  0   0  4  [13] .text             PROGBITS        00400540 000540 000280 00  AX  0   0 16  [14] .MIPS.stubs       PROGBITS        004007c0 0007c0 000030 00  AX  0   0  4  [15] .fini             PROGBITS        004007f0 0007f0 000044 00  AX  0   0  4  [16] .rodata           PROGBITS        00400840 000840 000020 00   A  0   0 16  [17] .eh_frame         PROGBITS        00400860 000860 000004 00   A  0   0  4  [18] .ctors            PROGBITS        00410ff0 000ff0 000008 00  WA  0   0  4  [19] .dtors            PROGBITS        00410ff8 000ff8 000008 00  WA  0   0  4  [20] .data             PROGBITS        00411000 001000 000010 00  WA  0   0 16  [21] .rld_map          PROGBITS        00411010 001010 000004 00  WA  0   0  4  [22] .got              PROGBITS        00411020 001020 00002c 04 WAp  0   0 16  [23] .sdata            PROGBITS        0041104c 00104c 000004 00 WAp  0   0  4  [24] .bss              NOBITS          00411050 001050 000010 00  WA  0   0 16  [25] .comment          PROGBITS        00000000 001050 000025 01  MS  0   0  1  [26] .pdr              PROGBITS        00000000 001078 000020 00      0   0  4  [27] .gnu.attributes   GNU_ATTRIBUTES  00000000 001098 000010 00      0   0  1  [28] .mdebug.abi32     PROGBITS        00000000 0010a8 000000 00      0   0  1  [29] .symtab           SYMTAB          00000000 0010a8 0004a0 10     30  50  4  [30] .strtab           STRTAB          00000000 001548 000208 00      0   0  1  [31] .shstrtab         STRTAB          00000000 001750 000121 00      0   0  1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  D (mbind), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Thinking-1-2">Thinking 1.2</h2><figure>    <img src="/img/os_thinking_01_02.png" width="700" height="auto" id="os-thinking-01-02"></figure><h3 id="1-2-1">1.2.1</h3><h4 id="自己编写的-readelf">自己编写的 <code>readelf</code></h4><p>切换到 <code>~/学号/tools/readelf</code> 文件夹后，输入命令 <code>./readelf ../../target/mos</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0:0x01:0x800100002:0x800113603:0x800113784:0x800113905:0x800116b06:0x07:0x08:0x09:0x010:0x011:0x0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="系统工具-readelf">系统工具 <code>readelf</code></h4><p>切换到 <code>~/学号/target</code> 文件夹后，输入命令 <code>readelf -S mos</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">There are 12 section headers, starting at offset 0x1f68:节头：  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            00000000 000000 000000 00      0   0  0  [ 1] .text             PROGBITS        80010000 0000c0 001360 00 WAX  0   0 16  [ 2] .reginfo          MIPS_REGINFO    80011360 001420 000018 18   A  0   0  4  [ 3] .MIPS.abiflags    MIPS_ABIFLAGS   80011378 001438 000018 18   A  0   0  8  [ 4] .rodata.str1.4    PROGBITS        80011390 001450 000320 01 AMS  0   0  4  [ 5] .rodata           PROGBITS        800116b0 001770 0001c0 00   A  0   0 16  [ 6] .pdr              PROGBITS        00000000 001930 000240 00      0   0  4  [ 7] .comment          PROGBITS        00000000 001b70 000025 01  MS  0   0  1  [ 8] .gnu.attributes   GNU_ATTRIBUTES  00000000 001b95 000010 00      0   0  1  [ 9] .symtab           SYMTAB          00000000 001ba8 000260 10     10  18  4  [10] .strtab           STRTAB          00000000 001e08 0000f1 00      0   0  1  [11] .shstrtab         STRTAB          00000000 001ef9 00006e 00      0   0  1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  D (mbind), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们不难发现，两者是匹配的。这说明我们编写的 <code>readelf</code> 程序，可以正确解析之前在 <code>target</code> 目录下生成的内核 <code>ELF</code> 文件。</p><h3 id="1-2-2">1.2.2</h3><h4 id="hello"><code>hello</code></h4><p>切换到 <code>~/学号/tools/readelf</code> 文件夹后，输入命令 <code>./readelf hello</code>，内容如下所示(若没有 <code>hello</code> 文件，则需先输入 <code>make hello</code> 命令生成 <code>hello</code> 文件):</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">0:0x01:0x80481342:0x80481583:0x80481784:0x80490005:0x80490286:0x80490a07:0x80b71f08:0x80b7d989:0x80b800010:0x80d404011:0x80e98a012:0x80eaca813:0x80eacb814:0x80eacb815:0x80eacbc16:0x80eacc017:0x80ecfb418:0x80ed00019:0x80ed06020:0x80edf0821:0x80edf4022:0x80ee2f423:0x80ee30024:0x80f11c425:0x026:0x027:0x028:0x029:0x030:0x031:0x032:0x033:0x034:0x0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输入命令 <code>readelf -S hello</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">There are 35 section headers, starting at offset 0xb630c:节头：  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            00000000 000000 000000 00      0   0  0  [ 1] .note.gnu.bu[...] NOTE            08048134 000134 000024 00   A  0   0  4  [ 2] .note.ABI-tag     NOTE            08048158 000158 000020 00   A  0   0  4  [ 3] .rel.plt          REL             08048178 000178 000070 08  AI 32  18  4  [ 4] .init             PROGBITS        08049000 001000 000024 00  AX  0   0  4  [ 5] .plt              PROGBITS        08049028 001028 000070 00  AX  0   0  8  [ 6] .text             PROGBITS        080490a0 0010a0 06e147 00  AX  0   0 16  [ 7] __libc_freeres_fn PROGBITS        080b71f0 06f1f0 000ba5 00  AX  0   0 16  [ 8] .fini             PROGBITS        080b7d98 06fd98 000018 00  AX  0   0  4  [ 9] .rodata           PROGBITS        080b8000 070000 01c040 00   A  0   0 32  [10] .eh_frame         PROGBITS        080d4040 08c040 015860 00   A  0   0  4  [11] .gcc_except_table PROGBITS        080e98a0 0a18a0 000125 00   A  0   0  1  [12] .tdata            PROGBITS        080eaca8 0a1ca8 000010 00 WAT  0   0  4  [13] .tbss             NOBITS          080eacb8 0a1cb8 000024 00 WAT  0   0  4  [14] .init_array       INIT_ARRAY      080eacb8 0a1cb8 000004 04  WA  0   0  4  [15] .fini_array       FINI_ARRAY      080eacbc 0a1cbc 000004 04  WA  0   0  4  [16] .data.rel.ro      PROGBITS        080eacc0 0a1cc0 0022f4 00  WA  0   0 32  [17] .got              PROGBITS        080ecfb4 0a3fb4 000040 00  WA  0   0  4  [18] .got.plt          PROGBITS        080ed000 0a4000 000044 04  WA  0   0  4  [19] .data             PROGBITS        080ed060 0a4060 000ea8 00  WA  0   0 32  [20] __libc_subfreeres PROGBITS        080edf08 0a4f08 000024 00 WAR  0   0  4  [21] __libc_IO_vtables PROGBITS        080edf40 0a4f40 0003b4 00  WA  0   0 32  [22] __libc_atexit     PROGBITS        080ee2f4 0a52f4 000004 00 WAR  0   0  4  [23] .bss              NOBITS          080ee300 0a52f8 002ec4 00  WA  0   0 32  [24] __libc_freer[...] NOBITS          080f11c4 0a52f8 000010 00  WA  0   0  4  [25] .comment          PROGBITS        00000000 0a52f8 00002b 01  MS  0   0  1  [26] .debug_aranges    PROGBITS        00000000 0a5323 000020 00      0   0  1  [27] .debug_info       PROGBITS        00000000 0a5343 0000ac 00      0   0  1  [28] .debug_abbrev     PROGBITS        00000000 0a53ef 000071 00      0   0  1  [29] .debug_line       PROGBITS        00000000 0a5460 000059 00      0   0  1  [30] .debug_str        PROGBITS        00000000 0a54b9 0000db 01  MS  0   0  1  [31] .debug_line_str   PROGBITS        00000000 0a5594 00003e 01  MS  0   0  1  [32] .symtab           SYMTAB          00000000 0a55d4 009960 10     33 1272  4  [33] .strtab           STRTAB          00000000 0aef34 00725e 00      0   0  1  [34] .shstrtab         STRTAB          00000000 0b6192 000177 00      0   0  1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  R (retain), D (mbind), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们不难发现，两者是匹配的。这说明我们编写的 <code>readelf</code> 程序，可以正确解析 <code>hello</code> 文件。</p><h4 id="readelf"><code>readelf</code></h4><p>当我们试图用自己编写的 <code>readelf</code> 程序来解析 <code>readelf</code> 文件，即输入 <code>./readelf readelf</code> 时，无任何输出。这说明我们编写的 <code>readelf</code> 程序，无法解析 <code>readelf</code> 文件。</p><p>但是系统工具 <code>readelf</code> 便可以解析 <code>readelf</code> 文件，输入命令 <code>readelf -S readelf</code>，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">There are 31 section headers, starting at offset 0x3898:节头：  [号] 名称              类型             地址              偏移量       大小              全体大小          旗标   链接   信息   对齐  [ 0]                   NULL             0000000000000000  00000000       0000000000000000  0000000000000000           0     0     0  [ 1] .interp           PROGBITS         0000000000000318  00000318       000000000000001c  0000000000000000   A       0     0     1  [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338       0000000000000030  0000000000000000   A       0     0     8  [ 3] .note.gnu.bu[...] NOTE             0000000000000368  00000368       0000000000000024  0000000000000000   A       0     0     4  [ 4] .note.ABI-tag     NOTE             000000000000038c  0000038c       0000000000000020  0000000000000000   A       0     0     4  [ 5] .gnu.hash         GNU_HASH         00000000000003b0  000003b0       0000000000000028  0000000000000000   A       6     0     8  [ 6] .dynsym           DYNSYM           00000000000003d8  000003d8       0000000000000198  0000000000000018   A       7     1     8  [ 7] .dynstr           STRTAB           0000000000000570  00000570       00000000000000cb  0000000000000000   A       0     0     1  [ 8] .gnu.version      VERSYM           000000000000063c  0000063c       0000000000000022  0000000000000002   A       6     0     2  [ 9] .gnu.version_r    VERNEED          0000000000000660  00000660       0000000000000030  0000000000000000   A       7     1     8  [10] .rela.dyn         RELA             0000000000000690  00000690       00000000000000d8  0000000000000018   A       6     0     8  [11] .rela.plt         RELA             0000000000000768  00000768       00000000000000f0  0000000000000018  AI       6    24     8  [12] .init             PROGBITS         0000000000001000  00001000       000000000000001b  0000000000000000  AX       0     0     4  [13] .plt              PROGBITS         0000000000001020  00001020       00000000000000b0  0000000000000010  AX       0     0     16  [14] .plt.got          PROGBITS         00000000000010d0  000010d0       0000000000000010  0000000000000010  AX       0     0     16  [15] .plt.sec          PROGBITS         00000000000010e0  000010e0       00000000000000a0  0000000000000010  AX       0     0     16  [16] .text             PROGBITS         0000000000001180  00001180       00000000000003bd  0000000000000000  AX       0     0     16  [17] .fini             PROGBITS         0000000000001540  00001540       000000000000000d  0000000000000000  AX       0     0     4  [18] .rodata           PROGBITS         0000000000002000  00002000       000000000000004a  0000000000000000   A       0     0     4  [19] .eh_frame_hdr     PROGBITS         000000000000204c  0000204c       0000000000000044  0000000000000000   A       0     0     4  [20] .eh_frame         PROGBITS         0000000000002090  00002090       00000000000000ec  0000000000000000   A       0     0     8  [21] .init_array       INIT_ARRAY       0000000000003d70  00002d70       0000000000000008  0000000000000008  WA       0     0     8  [22] .fini_array       FINI_ARRAY       0000000000003d78  00002d78       0000000000000008  0000000000000008  WA       0     0     8  [23] .dynamic          DYNAMIC          0000000000003d80  00002d80       00000000000001f0  0000000000000010  WA       7     0     8  [24] .got              PROGBITS         0000000000003f70  00002f70       0000000000000090  0000000000000008  WA       0     0     8  [25] .data             PROGBITS         0000000000004000  00003000       0000000000000010  0000000000000000  WA       0     0     8  [26] .bss              NOBITS           0000000000004020  00003010       0000000000000010  0000000000000000  WA       0     0     32  [27] .comment          PROGBITS         0000000000000000  00003010       000000000000002b  0000000000000001  MS       0     0     1  [28] .symtab           SYMTAB           0000000000000000  00003040       0000000000000498  0000000000000018          29    19     8  [29] .strtab           STRTAB           0000000000000000  000034d8       00000000000002a4  0000000000000000           0     0     1  [30] .shstrtab         STRTAB           0000000000000000  0000377c       000000000000011a  0000000000000000           0     0     1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),  L (link order), O (extra OS processing required), G (group), T (TLS),  C (compressed), x (unknown), o (OS specific), E (exclude),  D (mbind), l (large), p (processor specific)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="差异原因分析">差异原因分析</h4><p>输入 <code>readelf -h hello</code> 命令，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ELF 头：  Magic：   7f 45 4c 46 01 01 01 03 00 00 00 00 00 00 00 00   类别:                              ELF32  数据:                              2 补码，小端序 (little endian)  Version:                           1 (current)  OS/ABI:                            UNIX - GNU  ABI 版本:                          0  类型:                              EXEC (可执行文件)  系统架构:                          Intel 80386  版本:                              0x1  入口点地址：               0x8049600  程序头起点：          52 (bytes into file)  Start of section headers:          746252 (bytes into file)  标志：             0x0  Size of this header:               52 (bytes)  Size of program headers:           32 (bytes)  Number of program headers:         8  Size of section headers:           40 (bytes)  Number of section headers:         35  Section header string table index: 34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输入 <code>readelf -h readelf</code> 命令，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ELF 头：  Magic：   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00   类别:                              ELF64  数据:                              2 补码，小端序 (little endian)  Version:                           1 (current)  OS&#x2F;ABI:                            UNIX - System V  ABI 版本:                          0  类型:                              DYN (Position-Independent Executable file)  系统架构:                          Advanced Micro Devices X86-64  版本:                              0x1  入口点地址：               0x1180  程序头起点：          64 (bytes into file)  Start of section headers:          14488 (bytes into file)  标志：             0x0  Size of this header:               64 (bytes)  Size of program headers:           56 (bytes)  Number of program headers:         13  Size of section headers:           64 (bytes)  Number of section headers:         31  Section header string table index: 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意到 <code>hello</code> 是 <code>ELF32</code> 类型，而 <code>readelf</code> 是 <code>ELF64</code> 类型。</p><p>当我们打开 <code>readelf.c</code> 文件可以发现其中数据类型前缀都是 <code>ELF32</code>，这说明此程序仅能分析32位的 <code>ELF</code> 文件。所以它不能分析64位的 <code>ELF</code> 文件。</p><h2 id="Thinking-1-3">Thinking 1.3</h2><p>首先，需要bootloader来引导启动，因为GXemul仿真器支持直接加载 <code>ELF</code> 格式的内核，也就是说，GXemul已经提供了bootloader的引导(启动)功能。</p><p>在发现了内核的正确位置后，我们只需要想办法让内核被加载到那里就可以了，这里我们就需要用到一个控制加载地址的工具，Linker Script。Linker Script中记录了各个节应该如何映射到段，以及各个段应该被加载到的位置。</p><p>接着，在Exercise 1.2中，通过填补 <code>kernel.lds</code> 中空缺的 <code>.text</code>、<code>.data</code> 和 <code>.bss</code> 节部分，我们便可将内核调整到正确的位置上。</p><p>最后再来解决链接后的程序从何处开始执行的问题。程序执行的第一条指令的地址称为入口地址。我们的实验就在 <code>kernel.lds</code> 中通过 <code>ENTRY(_start)</code> 来设置程序入口为 <code>_start</code>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OS AI Spring 2023 Lab0 Report</title>
    <link href="/2023/04/29/OS-AI-Spring-2023-Lab0-Report/"/>
    <url>/2023/04/29/OS-AI-Spring-2023-Lab0-Report/</url>
    
    <content type="html"><![CDATA[<h1>OS AI Spring 2023 Lab0 Report</h1><h2 id="Thinking-0-1">Thinking 0.1</h2><p>在 <code>~/learnGit</code> 目录下一开始使用 <code>touch README.txt</code> 命令创建一个名为 <code>README.txt</code> 的文件后，执行命令 <code>git status &gt; Untracked.txt</code> ，此时新建的 <code>README.txt</code> 文件处于<strong>未跟踪状态(untracked)</strong>。</p><p>接着，在 <code>README.txt</code> 文件中添加任意内容，并使用 <code>add</code> 命令，再执行命令 <code>git status &gt; Stage.txt</code>，此时 <code>README.txt</code> 文件处于<strong>暂存状态(staged)</strong>。</p><p>使用 <code>git commit -m &quot;my student ID is: xxxxxxxx&quot;</code> 提交 <code>README.txt</code> 文件，然后再修改 <code>README.txt</code> 文件，并执行命令 <code>git status &gt; Modified.txt</code>，此时 <code>README.txt</code> 文件处于<strong>被修改状态(modified)</strong>。</p><p>因此，执行命令 <code>cat Modified.txt</code>，其结果和第一次执行 <code>add</code> 命令之前的status不一样。</p><h2 id="Thinking-0-2">Thinking 0.2</h2><p>箭头中的Add the file对应 <code>git add</code> 指令，箭头中的Stage the file对应 <code>git add</code> 指令，箭头中的Commit对应 <code>git commit</code> 指令。</p><figure>    <img src="/img/lifecycle_file_git.png" width="700" height="auto" id="lifecycle-file-git"></figure><h2 id="Thinking-0-3">Thinking 0.3</h2><h3 id="0-3-1">0.3.1</h3><p>代码文件 <code>print.c</code> 被错误删除时，应当使用 <code>git checkout -- print.c</code> 命令将其恢复。</p><blockquote><p><strong>背景知识</strong>:<br><code>git checkout -- &lt;file&gt;</code><br>如果在工作区中对多个文件经过多次修改后，发现编译无法通过了。如果尚未执行 <code>git add</code>，则可使用本命令将工作区恢复成原来的样子。</p></blockquote><h3 id="0-3-2">0.3.2</h3><p>在代码文件 <code>print.c</code> 被错误删除，并执行了 <code>git rm print.c</code> 命令的情况下，应当<strong>顺次使用</strong><br><code>git reset HEAD print.c</code> 和 <code>git checkout -- print.c</code> 两条命令将其恢复。</p><blockquote><p>The primary function of <code>git rm</code> is to remove tracked files from the Git index.</p></blockquote><blockquote><p><strong>背景知识</strong>:<br><code>git reset HEAD &lt;file&gt;</code><br>上一条命令(<code>git checkout -- &lt;file&gt;</code>)是在未执行 <code>git add</code> 命令便修改文件生效并放入暂存区，可使用 <code>git checkout</code> 命令。那么如果不慎已经执行了 <code>git add</code>，则可使用本命令。再对需要恢复的文件使用上一条命令(<code>git checkout -- &lt;file&gt;</code>)即可。</p></blockquote><h3 id="0-3-3">0.3.3</h3><p>无关文件 <code>hello.txt</code> 已经被添加到暂存区时，在不删除此文件的前提下将其移出暂存区的命令是:<br><code>git rm --cached hello.txt</code>。</p><blockquote><p><strong>背景知识</strong>:<br><code>git rm --cached &lt;file&gt;</code> 这条命令是指从暂存区中删除不再想跟踪的文件，比如调试用的文件等。</p></blockquote><h2 id="Thinking-0-4">Thinking 0.4</h2><p>三次提交说明的哈希值如下所示</p><ul><li>3: <code>505df91bb496d2f4b6fc1f4f4aaaf35e558bd198</code></li><li>2: <code>b4e41735ef235922620ebe4824f934bf0cdeac33</code></li><li>1: <code>9fa0ad00781a5ba672ceb376e40944e0b111f437</code></li></ul><p>当执行命令 <code>git reset --hard HEAD^</code> 后，终端显示 <code>HEAD 现在位于 b4e4173 2</code>，再执行 <code>git log</code>，此时最新的一次commit记录的提交说明为2，提交说明为3的commit记录在log中不显示。</p><p>找到提交说明为1的commit的哈希值，并执行命令 <code>git reset --hard &lt;hash&gt;</code> 后(<code>&lt;hash&gt;</code> 为提交说明为1的commit对应的哈希值)，终端显示 <code>HEAD 现在位于 9fa0ad0 1</code>，再执行 <code>git log</code>，此时最新的一次commit记录的提交说明为1，提交说明为3、2的commit记录在log中不显示。</p><p>为了再次回到新版本，找到提交说明为3的commit的哈希值，并执行命令<code>git reset --hard &lt;hash&gt;</code> 后(<code>&lt;hash&gt;</code> 为提交说明为3的commit对应的哈希值)，终端显示 <code>HEAD 现在位于 505df91 3</code>，再执行 <code>git log</code>，此时最新的一次commit记录的提交说明为3，提交说明为3、2、1的commit记录在log中均显示。</p><h2 id="Thinking-0-5">Thinking 0.5</h2><p>当执行 <code>echo first</code> 命令时，直接在终端显示 <code>first</code>。</p><p>当执行 <code>echo second &gt; output.txt</code>命令时，终端无输出，<code>output.txt</code> 文件中的内容变为 <code>second</code>。</p><p>当执行 <code>echo third &gt; output.txt</code>命令时，终端无输出，<code>output.txt</code> 文件中的内容变为 <code>third</code>，原先文件中的 <code>second</code> 被覆盖。</p><p>当执行 <code>echo fourth &gt;&gt; output.txt</code>命令时，终端无输出，<code>output.txt</code> 文件中的内容变为 <code>third</code> 和 <code>fourth</code>，因为 <code>&gt;&gt;</code> 实现的是追加输出，不覆盖原有内容。</p><blockquote><p>注: 第四的英文是fourth而不是<s>forth</s>，指导书中有一个typo。</p></blockquote><h2 id="Thinking-0-6">Thinking 0.6</h2><p><code>test</code> 文件的内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> Shell Start<span class="token punctuation">..</span>.<span class="token builtin class-name">echo</span> <span class="token builtin class-name">set</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">set</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span><span class="token builtin class-name">set</span> c <span class="token operator">=</span> a + b<span class="token assign-left variable">c</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$a</span>+<span class="token variable">$b</span><span class="token punctuation">]</span><span class="token builtin class-name">echo</span> c <span class="token operator">=</span> <span class="token variable">$c</span><span class="token builtin class-name">echo</span> save c to ./file1<span class="token builtin class-name">echo</span> <span class="token variable">$c</span> <span class="token operator">></span> file1<span class="token builtin class-name">echo</span> save b to ./file2<span class="token builtin class-name">echo</span> <span class="token variable">$b</span> <span class="token operator">></span> file2<span class="token builtin class-name">echo</span> save a to ./file3<span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token operator">></span> file3<span class="token builtin class-name">echo</span> save file1 file2 file3 to file4<span class="token function">cat</span> file1 <span class="token operator">></span> file4<span class="token function">cat</span> file2 <span class="token operator">>></span> file4<span class="token function">cat</span> file3 <span class="token operator">>></span> file4<span class="token builtin class-name">echo</span> save file4 to ./result<span class="token function">cat</span> file4 <span class="token operator">>></span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>为了生成上面的这份 <code>test</code> 文件，对应的 <code>command</code> 文件的内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">'echo Shell Start...'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo set a = 1'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'a=1'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo set b = 2'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'b=2'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'set c = a + b'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'c=$[$a+$b]'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo c = $c'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo save c to ./file1'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo $c > file1'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo save b to ./file2'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo $b > file2'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo save a to ./file3'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo $a > file3'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo save file1 file2 file3 to file4'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'cat file1 > file4'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'cat file2 >> file4'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'cat file3 >> file4'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'echo save file4 to ./result'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">'cat file4 >> result'</span> <span class="token operator">>></span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有了这样的一份 <code>command</code> 文件后，我们通过 <code>bash command</code> 命令即可得到 <code>test</code> 文件。再通过 <code>bash test</code> 命令即可得到 <code>result</code> 文件，同时我们还会收获 <code>file1</code>、<code>file2</code>、<code>file3</code>、<code>file4</code> 四个新的文件。</p><p><code>result</code>文件中的内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span><span class="token number">2</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>解释说明</strong>:</p><ul><li><code>c=$[$a+$b]</code> 将 <code>c</code> 赋值为 <code>a + b</code>，即 <code>c = a + b = 1 + 2 = 3</code>。</li><li><code>echo $c &gt; file1</code>, <code>echo $b &gt; file2</code>, <code>echo $a &gt; file3</code> 三条命令向 <code>file1</code>、<code>file2</code>、<code>file3</code>三个文件中分别写入了3, 2, 1。</li><li><code>cat file1 &gt; file4</code>, <code>cat file2 &gt;&gt; file4</code>, <code>cat file3 &gt;&gt; file4</code> 三条命令向 <code>file4</code> 中顺次写入了3, 2, 1。</li><li><code>cat file4 &gt;&gt; result</code> 把 <code>file4</code> 中的3, 2, 1写入了 <code>result</code> 文件中。</li></ul></blockquote><h3 id="0-6-1">0.6.1</h3><blockquote><p><strong>Q</strong>: 思考 <code>echo echo Shell Start</code> 与 <code>echo 'echo Shell Start'</code> 效果是否有区别。</p><p><strong>A</strong>: 这两者效果没有区别，终端的输出结果都是 <code>echo Shell Start</code>。</p></blockquote><h3 id="0-6-2">0.6.2</h3><blockquote><p><strong>Q</strong>: 思考 <code>echo echo $c&gt;file1</code> 与 <code>echo 'echo $c&gt;file1'</code> 效果是否有区别。</p><p><strong>A</strong>: <code>echo echo $c&gt;file1</code> 与 <code>echo 'echo $c&gt;file1'</code> 效果有区别，前者会将 <code>echo $c</code> 重定向到 <code>file1</code>，后者会将 <code>echo $c&gt;file1</code> 这个字符串在终端输出。</p></blockquote><p>我们可以创建一个名为 <code>tmp</code> 的文件，内容如下所示:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">3</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">echo</span> <span class="token variable">$c</span><span class="token operator">></span>file1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>在终端输入 <code>bash tmp</code> 命令后，检查 <code>file1</code> 文件中的内容为 <code>echo 3</code>。再将 <code>tmp</code> 文件中的第三行改为 <code>echo 'echo $c&gt;file1'</code>，并清空 <code>file1</code> 文件中的内容。再次在终端输入 <code>bash tmp</code> 命令，终端输出 <code>echo $c&gt;file1</code>，<code>file1</code>文件仍为空，印证了之前的推理。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/28/hello-world/"/>
    <url>/2023/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
